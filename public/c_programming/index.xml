<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C_Programmings on Caiyou Yuan&#39;s Pages</title>
    <link>http://localhost:1313/c_programming/</link>
    <description>Recent content in C_Programmings on Caiyou Yuan&#39;s Pages</description>
    <image>
      <title>Caiyou Yuan&#39;s Pages</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.125.3</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/c_programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/c_programming/01/1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/c_programming/01/1/</guid>
      <description>计算概论(C语言)习题课讲义01 内容概要 作业系统OpenJudge 编程环境CodeBlocks 图灵停机问题 作业系统：OpenJudge 网址：http://openjudge.cn/
准备工作 网上注册
点击此处注册，用户名格式：学号+姓名
加入小组
注册完成后，在小组栏目中查找数院计概（C语言），并加入
使用演示 提交作业方式：对源代码全选，复制和粘帖。即Ctrl+A, Ctrl+C, Ctrl+V
举例“Hello C”程序
#include &amp;lt;stdio.h&amp;gt; int main() { printf(&amp;#34;Hello C&amp;#34;); /*向屏幕输出结果*/ return 0; } 系统判定流程 还有一些其他错误，例如Time Limit Exceeded/Memory Limit Exceeded等。
一些典型错误 错误一：
#include &amp;lt;stdio.h&amp;gt; int main() { printf(&amp;#34;Hello C&amp;#34;) /*向屏幕输出结果*/ return 0; } 错误二：
#include &amp;lt;stdio.h&amp;gt; int main() { printf(&amp;#34;Hello，C&amp;#34;); /*向屏幕输出结果*/ return 0; } 错误三：
int main() { printf(&amp;#34;Hello C&amp;#34;) /*向屏幕输出结果*/ return 0; } 编程建议 OpenJudge的帮助文档给出了下述建议：</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/c_programming/02/2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/c_programming/02/2/</guid>
      <description>计算概论(C语言)习题课讲义02 内容概要 数的存储
字符的存储
数的存储 两个事实：
计算机以二进制存储所有的数据，无论是文件、图片，还是视频及程序。
计算机的存储空间是有限的；所以，计算机只能表示有限的数。
整数的存储 不同电脑间的变量长度，有所差异。具体可以使用 sizeof 运算符测试。
short int 类型的整数用四个字节的二进制表示
int 类型的整数用八个字节的二进制表示
long int 类型的整数用十六字节的二进制表示
上述三种类型，未用 unsigned 关键词修饰，均表示带符号的整数。即类型的最高一位为符号位，用0表示正数，1表示负数。
所以，根据上述信息，请思考：
short int 类型能够表示的最大整数为？ 再加一的话，结果如何？
short int 类型能够表示的最小整数为？ 再减一的话，结果如何？
上述问题中的类型换成 unsigned short int 或者 int 呢？
演示：整数的上下溢出 小数的存储 为什么小数，又被叫做浮点数呢？
这是由于计算机内部在存储小数时，使用的是如下的二进制的科学计数法： Number=A*2^B。其中，A被称为尾数，指数B称为阶码。小数点的位置是“浮动”的，浮点数的名称由此而来。
float 类型为单精度浮点数，长32位，尾数长度23,指数长度8，首位为符号位，指数偏移量127；
double 类型为双精度浮点数，长64位，尾数长度52,指数长度11，首位为符号位，指数偏移量1023；
约定小数点左边隐含有一位，通常这位数是1，所以上述单精度尾数的实际长度为24(默认省略小数点左边的1则为23)，双精度尾数长度实际为53（默认省略小数点左边的1则问52）；
机器精度
Wikipedia上机器精度Machine Epsilon是这样描述的：“Machine epsilon gives an upper bound on the relative error due to rounding in floating point arithmetic”。因为浮点数是离散的，所以实数的表示存在着误差。例如圆周率这样的无限不循环小数不可能精确地由某一个浮点数表示。
我们需要一些具体的量去刻画这种误差，以估计结果的准确性。机器精度便是其中之一：它是所有相对误差的上限。相对误差是绝对误差与精确值的比值的绝对值。例如一个精确的实数x，所有单精度浮点数中与x距离最近的数为y，绝对误差为|y-x|，相对误差即|y−x|/|x|，而所有相对误差的上限便是单精度浮点数的机器精度。
对单精度而言，是2的-23次方，约为1.1921e-07；对双精度而言，是2的-52次方，约为2.2204e-16。</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/c_programming/03/3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/c_programming/03/3/</guid>
      <description>计算概论（C语言）习题课讲义03 内容概要 从源代码到可执行程序
变量的使用
函数的使用
从源代码到可执行程序 更为具体流程如下图所示，
预处理(Preprocessing) 使用预处理器cpp (也可使用gcc -E)，将所有的#include头文件以及宏定义替换成其真正的内容。预处理之后得到的仍然是文本文件，但文件体积会大很多。
编译(Compilation) 使用编译器gcc (或者gcc -S)，将经过预处理之后的文件转换成特定的汇编代码。
汇编(Assemble) 使用汇编器as (也可以使用gcc -c)，将上一步的汇编代码转换成机器码(machine code)，这一步产生的文件叫做目标文件，是二进制格式。
链接(Linking) 使用链接器ld，将多个目标文以及所需的库文件(.so等)链接成最终的可执行文件(executable file)。
演示：从源代码到程序 名词解释：GCC
the GNU Compiler Collection Link
The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, Go, and D, as well as libraries for these languages (libstdc++,&amp;hellip;). GCC was originally written as the compiler for the GNU operating system.
变量的使用 一个变量是一个固定大小的“仓库”，用于存储一定类型的数据。变量的定义是“申请仓库”的过程，变量的赋值或取值，是“使用仓库”的过程。值得注意的是，C语言对局部变量，并不“主动打扫仓库”。
演示: 变量的未初始化 名词解释：局部变量和全局变量</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/c_programming/04/4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/c_programming/04/4/</guid>
      <description>计算概论（C语言）习题课讲义04 内容概要 判断语句
循环语句
循环算法举例
判断语句 if(boolean_expression) { /* 如果布尔表达式为真将执行的语句 */ } else { /* 如果布尔表达式为假将执行的语句 */ } 或者嵌套时，
if(boolean_expression 1) { /* 当布尔表达式 1 为真时执行 */ } else if( boolean_expression 2) { /* 当布尔表达式 2 为真时执行 */ } else if( boolean_expression 3) { /* 当布尔表达式 3 为真时执行 */ } else { /* 当上面条件都不为真时执行 */ } 关系表达式只有两种可能的结果，成立为真，反之为假。由于C语言没有专门表示逻辑值的类型，所以任何基本类型的值都可以当做逻辑值使用。零表示假，非零表示真。
演示：零表示假，非零表示真 条件运算符?:，可以用来替代 if&amp;hellip;else 语句.
注意点 5&amp;gt;=3&amp;gt;=1的理解
将==打成=的手误
循环语句 while循环
do&amp;hellip;while循环
for循环
while(condition) { statement(s); } do { statement(s); }while(condition); for ( init; condition; increment ) { statement(s); } 演示：三种循环方式实现 1+2+&amp;hellip;+100 循环算法举例 辗转相除法 又名欧几里得方法，是求两个整数数最大公约数的经典算法。</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/c_programming/05/5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/c_programming/05/5/</guid>
      <description>计算概论（C语言）习题课讲义05 内容概要 递归
循环
调试
递归 The process in which a function calls itself directly or indirectly is called recursion.
两个要素：
１.　递归出口
２.　递归公式
int fact(int n) { if (n == 0) // 递归出口 return 1; else return n * fact(n - 1);　//递归公式 } 演示：调试演示递归程序执行次序 This illustration is in English, rather than an actual programming language, but is useful for explaining the process in a non-technical way:
A child couldn&amp;#39;t sleep, so her mother told a story about a little frog, who couldn&amp;#39;t sleep, so the frog&amp;#39;s mother told a story about a little bear, who couldn&amp;#39;t sleep, so bear&amp;#39;s mother told a story about a little weasel .</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/c_programming/06/6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/c_programming/06/6/</guid>
      <description>计算概论（C语言）习题课讲义06 内容概要 习题讲解
前五章梳理
课堂练习
习题讲解 哥德巴赫猜想的验证 算法框架：
int prime(int n); //判断输入n是否为素数 int goldbach(int n); //判断输入n是否可以分解为两个素数之和 同学代码点评一:
#include&amp;lt;stdio.h&amp;gt; #include&amp;lt;math.h&amp;gt; #include&amp;lt;time.h&amp;gt; int isprime(int n){ for(int m=2;m*m&amp;lt;=n;++m){ if (n%m==0) return 0;} return 1; } int main(){ for(;;){ int a=0,t,n;double time1=0; printf(&amp;#34;请输入需要分解的偶数，输入奇数结束程序：&amp;#34;) ; scanf(&amp;#34;%d&amp;#34;,&amp;amp;n); time1=clock(); if(n%2==0&amp;amp;&amp;amp;n&amp;gt;4){ for(t=3;t&amp;lt;=n/2;t+=2){ if (isprime(t)&amp;amp;&amp;amp;isprime(n-t)){ printf(&amp;#34;%d=%d+%d\n&amp;#34;,n,t,n-t); a=a+1; } } printf(&amp;#34;共有%d组,用时%f秒\n\n&amp;#34;,a,(clock()-time1)/CLOCKS_PER_SEC); } else{ printf(&amp;#34;程序结束&amp;#34;); return 0; } } } 同学代码点评二:
#include&amp;lt;stdio.h&amp;gt; #include&amp;lt;stdlib.h&amp;gt; #include&amp;lt;math.h&amp;gt; int prime(int n){ int m; for(m=2;m&amp;lt;=n;++m){ if(n%m==0){ break; } } if(m==n) return 1; else return 0; } int main(){ int m,n,t; scanf(&amp;#34;%d&amp;#34;,&amp;amp;n); for(m=6;m&amp;lt;=n;m=m+2){ for(t=3;t&amp;lt;=m-3;t=t+2){ if (prime(t)==1 &amp;amp;&amp;amp; prime(m-t)==1){ printf(&amp;#34;%d=%d+%d\n&amp;#34;,m,t,m-t); break; } } if(t==m-3 &amp;amp;&amp;amp; m&amp;gt;=8){ printf(&amp;#34;推翻了哥德巴赫猜想！！！！！！\n&amp;#34;); break; }} if(m==n+2) printf(&amp;#34;哥德巴赫猜想在小于等于%d成立\n&amp;#34;,n); return 0; } C语言代码规范 虽然Ｃ语言的标准中并没有对代码的缩进和换行有硬性的要求，但一般大家都会有一些通俗的约定．这里推荐使用如下的代码缩进风格：</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/c_programming/07/7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/c_programming/07/7/</guid>
      <description>计算概论（C语言）习题课讲义07 内容概要 习题讲解
数组初步
课堂练习
习题讲解 输出一定范围勾股数 代码点评一:
#include &amp;lt;stdio.h&amp;gt; void output(int min, int max) { int i,j,k; //简单粗暴,三重循环; for(i=min;i&amp;lt;=max;i++) { for(j=i;j&amp;lt;=max;j++) { for(k=j;k&amp;lt;=max;k++) { if(i*i+j*j==k*k) { printf(&amp;#34;%d %d %d\n&amp;#34;,i,j,k); } } } } } int main() { int min,max; scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;min, &amp;amp;max); output(min,max); return 0; } 代码点评二:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;math.h&amp;gt; int perfect(int s){ int n; for(n=1;n*n&amp;lt;=s;n=n+1) if(n*n==s) return 1; return 0; } int ssqrt(int s){ int n; for(n=1;n*n&amp;lt;=s;n=n+1) if(n*n==s) return n; return 0; } void haha(int m,int n){ int s; int a;int b; for(s=m;s&amp;lt;n;s=s+1) {for(a=m+1;a&amp;lt;=n;a=a+1) if(perfect(a*a-s*s)&amp;amp;(s*s&amp;lt;a*a/2)) printf(&amp;#34;%d %d %d\n&amp;#34;,s,ssqrt(a*a-s*s),a); } } int main(){ int min,max; scanf(&amp;#34;%d%d&amp;#34;,&amp;amp;min,&amp;amp;max); haha(min,max); } Collatz函数 两个注意点:</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/c_programming/08/8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/c_programming/08/8/</guid>
      <description>计算概论（C语言）习题课讲义08 内容概要 习题讲解
数组进阶
课堂练习: 排序初步
习题讲解 输出所有字符数不超过10的行 代码点评一:
读入一行 =&amp;gt;如何判断读入一行?
进行判断
少十输出 =&amp;gt;输出时, 结果如何存储?
否则跳过
#include &amp;lt;stdio.h&amp;gt; int main() { char Line[1000]; char c; int count=0; while((c=getchar())!=EOF) { Line[count++]=c; if(c==&amp;#39;\n&amp;#39;) //读入一行 { //进行判断 if(count&amp;lt;=10) //输出 { for(int i=0;i&amp;lt;count;i++) { putchar(Line[i]); } } else //跳过 { } count=0; } } return 0; } 代码点评二:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; // string.h? int main(){ int i=0,c,k; int line[10]; while((c=getchar())!=EOF) { if(i==10) { i=0; while(getchar()!</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/c_programming/09/9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/c_programming/09/9/</guid>
      <description>计算概论（C语言）习题课讲义09 内容概要 习题讲解
字符串
课堂练习: 排序初步
习题讲解 字符串转浮点数 代码点评一:
#include &amp;lt;stdio.h&amp;gt; double t(char a[],const int n) { double x=0; int m=n; if (a[0]==&amp;#39;\0&amp;#39;) return 0.; for(int i=0;i&amp;lt;n;++i) { if(a[i]==&amp;#39;.&amp;#39;) m=i; //记录小数点位置 } for (int i=0;i&amp;lt;m;++i) { x=x*10+a[i]-&amp;#39;0&amp;#39;; } for(int i=m+1,j=10;i&amp;lt;n;++i) //处理小数点 { x=x+(a[i]-&amp;#39;0&amp;#39;)/(double)j; j*=10; } return x; } int main(int argc, const char * argv[]) { char a[5]={&amp;#39;.&amp;#39;,&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;,&amp;#39;\0&amp;#39;}; //可以使用字符串,对字符数组初始化 char b[4]={&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;,&amp;#39;\0&amp;#39;}; char c[8]={&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;,&amp;#39;.&amp;#39;,&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;,&amp;#39;\0&amp;#39;}; char d[1]={&amp;#39;\0&amp;#39;}; printf(&amp;#34;The real number of 1st input string is: %f\n&amp;#34;,t(d,1)); printf(&amp;#34;The real number of 2st input string is: %f\n&amp;#34;,t(a,4)); printf(&amp;#34;The real number of 3st input string is: %f\n&amp;#34;,t(b,3)); printf(&amp;#34;The real number of 4st input string is: %f\n&amp;#34;,t(c,7)); return 0; } 代码点评二:</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/c_programming/10/10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/c_programming/10/10/</guid>
      <description>计算概论（C语言）习题课讲义10 内容概要 习题讲解
指针
课堂练习
习题讲解 字典序输出所有排列 代码点评一:
#include &amp;lt;stdio.h&amp;gt; #define Nmax 100 void print(int A[], int n) { for(int i=0;i&amp;lt;n;i++) { printf(&amp;#34;%d&amp;#34;,A[i]); } printf(&amp;#34;\n&amp;#34;); } void swap(int A[], int m, int n) //交换两元素 { int tmp=A[m]; A[m]=A[n]; A[n]=tmp; } int next(int A[], int n) { int k,i; for(k=n-2;A[k]&amp;gt;A[k+1]&amp;amp;&amp;amp;k&amp;gt;=0;k--); // Find first(right to left) A[k]&amp;lt;A[k+1] if(k&amp;lt;0) return 0; // This means A[j]&amp;gt;A[j+1] for all j // Maximum in lexicographical order; for(i=n-1;A[k]&amp;gt;A[i];i--); // Find minimal A[i]&amp;gt;A[k] swap(A,k,i); // Exchange A[i] and A[k] //Sort A[k+1]--A[n-1]; Any sort is OK; But Notice it&amp;#39;s in reverse order k=k+1,i=n-1; while(k&amp;lt;i) { swap(A,k,i); k++; i--; } return 1; } int main() { int A[Nmax], n; scanf(&amp;#34;%d&amp;#34;,&amp;amp;n); for(int i=0;i&amp;lt;n;i++) { A[i]=i+1; } do{ print(A,n); }while(next(A,n)); return 0; } 代码点评二:</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/c_programming/11/11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/c_programming/11/11/</guid>
      <description>计算概论（C语言）习题课讲义11 内容概要 机考题目讲解
文件操作
习题讲解
机考题目讲解 矩形面积 // 想法: 逐个情况判断 #include &amp;lt;stdio.h&amp;gt; int recArea(int ldx, int ldy, int rux, int ruy) { return (rux-ldx)*(ruy-ldy); } int area(int A, int B, int C, int D, int E, int F, int G, int H) { int AREA=recArea(A,B,C,D)+recArea(E,F,G,H); if(A&amp;lt;=E) { if(C&amp;lt;=E) return AREA; if(B&amp;gt;=F) { if(B&amp;gt;=H) return AREA; if(D&amp;lt;H) return AREA-recArea(E,B,C,D); return AREA-recArea(E,B,C,H); } if(D&amp;lt;F) return AREA; if(D&amp;lt;H) return AREA-recArea(E,F,C,D); return AREA-recArea(E,F,C,H); } return area(E,F,G,H,A,B,C,D); } int main() { int A,B,C,D,E,F,G,H; scanf(&amp;#34;%d %d %d %d %d %d %d %d&amp;#34;, &amp;amp;A,&amp;amp;B,&amp;amp;C,&amp;amp;D,&amp;amp;E,&amp;amp;F,&amp;amp;G,&amp;amp;H); printf(&amp;#34;%d&amp;#34;, area(A,B,C,D,E,F,G,H)); return 0; } // 思路:容斥原理;计算重叠区域面积可以分解为两个一维问题 #include &amp;lt;stdio.</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/c_programming/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/c_programming/readme/</guid>
      <description>计算概论（C语言）讲义及参考程序</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/c_programming/test01/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/c_programming/test01/test/</guid>
      <description>计算概论期中题目备选 简答题 计算题 printf(&amp;#34;%d&amp;#34;,(int)(7.2/5)+3/2+010+0x1); 答案: 11　(考察类型转化，八进制以及十六进制)；
int x=0; (x++)?(x=2):(x==3); printf(&amp;#34;%d&amp;#34;,x); 答案: 1　(考察++号前置后置的区别，条件运算符以及逻辑判断不改变变量数值);
char c=&amp;#39;a&amp;#39;; printf(&amp;#34;%c&amp;#34;,c+2); 答案: c (考察字符编码的连续性，以及c语言中字符类型可以当成整数运算)
int flag=1; int t=0; switch(flag) { default: t++; case -1: t++; break; case 0: t++; break; } printf(&amp;#34;%d&amp;#34;,t); 答案: 2　(考察switch语句和break的用法)
代码理解 阅读下面代码，写出程序的输出结果;
#include &amp;lt;stdio.h&amp;gt; #define LIMIT 6 void fun(int n) { int i=0; if (n&amp;lt;=LIMIT) { for(i=0;i&amp;lt;n;i++) { printf(&amp;#34;*&amp;#34;); } printf(&amp;#34;\n&amp;#34;); } if(n+1&amp;lt;=LIMIT) { fun(n+1); } if (n&amp;lt;LIMIT) { for(i=0;i&amp;lt;n;i++) { printf(&amp;#34;*&amp;#34;); } printf(&amp;#34;\n&amp;#34;); } } int main() { fun(1); return 0; } 答案：</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/c_programming/test02/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/c_programming/test02/test/</guid>
      <description>计算概论机考题目备选 幂法求解矩阵绝对值最大的特征值 矩阵的特征值在理论和实践中均有重要作用, 所以如何矩阵的特征值, 是大家所关心的一个问题. 对于求解矩阵绝对值最大的特征值, 有如下的简单方法:
随机选择初始向量 v
不断地做矩阵向量乘法 v=Av
可以证明, 在一定条件下, v 会逐渐收敛到 A 的绝对值最大的特征值所对应的特征向量. 所以, 请用C语言实现如下算法, 计算矩阵绝对值最大的特征值及其对应的特征向量.
选择初始向量 v;
做矩阵向量乘法 v=Av;
将 v 归一化(目的是防止溢出), 即v除以v的二范数;
做收敛性判断; 如果不收敛, 返回第2步, 否则输出v做为近似特征向量.
附加说明:
初始向量 v 不妨选为分量全为1的向量;
向量 v 的二范数定义为, v的各分量的平方和, 再开根号.
收敛的准则: 前后两次 v 的差向量的二范数小于1E-8;
输入时, 首先输入一个整数 N 代表矩阵的规模, 然后输入 N*N 个双精度浮点数, 做为矩阵元素. 输出时为了统一, 请输出二范数为1, 且第一个分量非负的那个特征向量.
一些简化: 输入矩阵为实对称矩阵, 且特征值互异.
样例输入一:
2 2 1 1 2 样例输出一:
Eigenvalue: 3.0000 Eigenvector: 0.7071 0.</description>
    </item>
  </channel>
</rss>
